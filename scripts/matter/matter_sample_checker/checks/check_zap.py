#
# Copyright (c) 2025 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause


from internal.checker import MatterSampleTestCase

"""
     ZAP FILES VALIDATION CHECK:

    Validates that ZAP (ZCL Advanced Platform) tool files and generated code are
    properly configured in Matter samples. ZAP is used to define Matter device data
    models, clusters, and generate the corresponding C++ implementation code.

    CONFIGURATION PARAMETERS:
    -------------------------
    • zap_directory: Path to directory containing ZAP source files, relative to
                    sample root. This directory holds the .zap configuration
                    and .matter IDL files that define the device data model.

    • required_extensions: Array of file extensions that must exist in zap_directory.
                          Check validates at least one file of each type exists:
                          - .zap: ZAP tool configuration (JSON format)
                          - .matter: Matter IDL definition (human-readable)

    • generated_directory: Path to directory containing ZAP-generated C++ code,
                          relative to zap_directory. Usually "zap-generated".
                          This directory is created by running ZAP code generation.

    • generated_files: Array of filenames that must exist in generated_directory.
                      These are C/C++ files generated by ZAP tool from .zap config.
                      Required for Matter cluster implementation.

    VALIDATION STEPS:
    -----------------
    1. ZAP Directory Validation:
       - Constructs full path: sample_path / zap_directory
       - Checks if directory exists
       - Reports error and stops if directory missing
       - Example: Validates src/default_zap/ exists

    2. ZAP Configuration Files Check:
       - Iterates through required_extensions (.zap, .matter)
       - Uses glob pattern to find files: zap_dir.glob(f'*{ext}')
       - Validates at least one file with each extension exists
       - Reports error if extension type is missing
       - Shows found filename in debug output
       - Examples:
         * Checks for *.zap file (e.g., lock.zap)
         * Checks for *.matter file (e.g., lock.matter)

    3. Generated Directory Validation:
       - Extracts last component of generated_directory path
       - Constructs path: zap_dir / generated_directory_name
       - Checks if generated directory exists
       - Reports error if zap-generated/ directory missing
       - Example: Validates src/default_zap/zap-generated/ exists

    4. Generated Files Validation:
       - Iterates through generated_files list
       - Constructs full path for each file: generated_dir / filename
       - Checks if each generated file exists
       - Reports error for each missing generated file
       - Shows found files in debug output
       - Examples:
         * Validates CHIPClusters.h exists
         * Checks for endpoint_config.h
         * Validates IMClusterCommandHandler.cpp present

    5. Issue Reporting:
       - Missing zap_directory: Error (stops further checks)
       - Missing .zap file: Error
       - Missing .matter file: Error
       - Missing generated directory: Error
       - Missing generated files: Error for each missing file
       - Found files: Debug output with filename

    ZAP DIRECTORY STRUCTURE:
    ------------------------
    src/default_zap/              ✓ Required: ZAP configuration directory
    ├── lock.zap                  ✓ Required: ZAP tool configuration (JSON)
    ├── lock.matter               ✓ Required: Matter IDL definition
    └── zap-generated/            ✓ Required: Generated code directory
        ├── CHIPClusters.h        ✓ Required: Cluster declarations
        ├── endpoint_config.h     ✓ Required: Endpoint configuration
        ├── gen_config.h          ✓ Required: General config
        ├── IMClusterCommandHandler.cpp  ✓ Required: Command handlers
        ├── PluginApplicationCallbacks.h ✓ Required: Callbacks
        ├── access.h              ○ Optional: Access control
        ├── af-structs.h          ○ Optional: Attribute structs
        └── ...                   ○ Other generated files

    NOTES:
    ------
    • ZAP files define the Matter device data model
    • Generated code must be checked into version control
    • Both source (.zap, .matter) and generated files are required
    • Check validates presence only (not content correctness)
    • ZAP tool version should match Matter SDK version
    • Re-generation required after any .zap file changes
    • Generated files should not be manually edited (will be overwritten)
"""


class ZapTestCase(MatterSampleTestCase):
    def name(self) -> str:
        return "ZAP Files"

    def prepare(self):
        pass

    def check(self):

        # Read configuration from file
        zap_config = self.config.config_file.get('zap_files')
        zap_dir = self.config.sample_path / zap_config['zap_directory']
        zap_generated_dir = zap_dir / \
            zap_config['generated_directory'].split('/')[-1]  # Get last part

        # 1. Check if the zap_directory exists
        if not zap_dir.exists():
            self.issue(
                f"Missing {zap_config['zap_directory']} directory")
            return

        # 2. Check for required ZAP files by extension
        for ext in zap_config['required_extensions']:
            files = list(zap_dir.glob(f'*{ext}'))
            if not files:
                self.issue(
                    f"No {ext} file found in {zap_config['zap_directory']}/")
            else:
                self.debug(f"✓ Found {ext} file: {files[0].name}")

        # 3. Check zap-generated directory and files
        if not zap_generated_dir.exists():
            self.issue(
                f"Missing {zap_config.get('generated_directory')}/ directory")
        else:
            expected_generated_files = zap_config.get('generated_files')

            for file_name in expected_generated_files:
                file_path = zap_generated_dir / file_name
                if not file_path.exists():
                    self.issue(
                        f"Missing ZAP generated file: {file_name}")
                else:
                    self.debug(f"✓ Found ZAP generated: {file_name}")
